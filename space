describe('AuthGuard', () => {
  let guard: AuthGuard;
  let sessionService: UniverSessionService;
  let router: Router;
  let utils: SSUtils;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        AuthGuard,
        { provide: UniverSessionService, useClass: MockSessionService },
        { provide: Router, useClass: MockRouter },
        { provide: SSUtils, useClass: MockSSUtils }
      ]
    });
    guard = TestBed.inject(AuthGuard);
    sessionService = TestBed.inject(UniverSessionService);
    router = TestBed.inject(Router);
    utils = TestBed.inject(SSUtils);
  });

  it('should allow activation if the session is authenticated', () => {
    spyOn(sessionService, 'isSessionAuthenticated').and.returnValue(true);

    const result = guard.canActivate({} as ActivatedRouteSnapshot, {} as RouterStateSnapshot);

    expect(result).toBe(true);
  });

  it('should redirect to the cancel URL if the session is not authenticated', () => {
    spyOn(sessionService, 'isSessionAuthenticated').and.returnValue(false);
    spyOn(sessionService, 'getCancelUrl').and.returnValue('/login');
    spyOn(utils, 'redirect');
    spyOn(router, 'navigateByUrl');

    const result = guard.canActivate({} as ActivatedRouteSnapshot, {} as RouterStateSnapshot);

    expect(result).toBe(false);
    expect(utils.redirect).toHaveBeenCalledWith('/login');
    expect(router.navigateByUrl).toHaveBeenCalledWith('/login');
  });
});
